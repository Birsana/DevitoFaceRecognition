# -*- coding: utf-8 -*-
"""devitoCNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11xhG34aQkprquOcDTAJAmjGYlVF6xxuJ
"""

from __future__ import absolute_import, division, print_function, unicode_literals

import os

import tensorflow as tf
from tensorflow import keras
print("TensorFlow version is ", tf.__version__)

import numpy as np

import shutil

from google.colab import drive
drive.mount('/content/drive')

!unzip '/content/drive/My Drive/devito.zip'

path = "/content/devito"
files = os.listdir(path)
filesCopy = files
print(len(files))

os.mkdir("train_dir")
os.mkdir("validation_dir")

counter = 1
for file in files:
  if counter < 277:
    shutil.move("/content/devito/%s" % (file), "/content/train_dir")
  else:
    shutil.move("/content/devito/%s" % (file), "/content/validation_dir")
  counter += 1

check1 = os.listdir("/content/train_dir")
check2 = os.listdir("/content/validation_dir")

print(len(check1))
print(len(check2))

os.mkdir("train")
os.mkdir("val")

shutil.move("/content/train_dir", "/content/train")

shutil.move("/content/validation_dir", "/content/val")

train_dir = "/content/train"
validation_dir = "/content/val"

image_size = 160
batch_size = 32
train_datagen = keras.preprocessing.image.ImageDataGenerator(
                rescale=1./255)

validation_datagen = keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
                train_dir, 
                target_size=(image_size, image_size),
                batch_size=batch_size,
                class_mode='binary')
validation_generator = validation_datagen.flow_from_directory(
                validation_dir, 
                target_size=(image_size, image_size),
                batch_size=batch_size,
                class_mode='binary')

IMG_SHAPE = (image_size, image_size, 3)

base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,
                                               include_top=False,
                                               weights='imagenet')

base_model.trainable = False

base_model.summary()

model = tf.keras.Sequential([
  base_model,
  keras.layers.GlobalMaxPooling2D(),  #TRY AVERAGE TOO
  keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.0001),
              loss='binary_crossentropy',
              metrics=['accuracy'])

epochs = 20
steps_per_epoch = train_generator.n // batch_size
validation_steps = validation_generator.n // batch_size

history = model.fit_generator(train_generator,
                              steps_per_epoch = steps_per_epoch,
                              epochs=epochs,
                              workers=4,
                              validation_data=validation_generator,
                              validation_steps=validation_steps)